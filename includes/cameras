<h2 id='cameras'>Cameras</h2>
<p>You can track and manage your drone cameras using the Cameras API. Each camera is represented by a <code>camera</code> object wth the following properties:</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the camera</td>
</tr>
<tr>
<td><code>camera_id</code></td>
<td>String</td>
<td>Camera ID</td>
</tr>
<tr>
<td><code>model</code></td>
<td>Object</td>
<td>Object representing the camera model. Contains the <code>name</code> of the model and the <code>model_id</code></td>
</tr>
<tr>
<td><code>notes</code></td>
<td>String</td>
<td>Descriptive notes for the camera</td>
</tr>
<tr>
<td><code>acquired_on</code></td>
<td>String</td>
<td>Date that camera was acquired on, in epoch (Unix timestamp), converted to milliseconds</td>
</tr>
</tbody></table>
<h3 id='get-all-cameras'>Get all cameras</h3>
<blockquote>
<p>Code samples</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span>
<span class="p">}</span>
<span class="n">result</span> <span class="o">=</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">get</span> <span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span>
  <span class="ss">params: </span><span class="p">{</span>
  <span class="p">},</span> <span class="ss">headers: </span><span class="n">headers</span>

<span class="nb">p</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'application/json'</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>

<span class="p">},</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>

<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</code></pre><pre class="highlight shell tab-shell"><code>curl -X GET <span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span> <span class="se">\</span>
     -H <span class="s1">'Authorization: Bearer &lt;AUTH_TOKEN&gt;'</span> <span class="se">\</span>
     -H <span class="s1">'X-API-Key: &lt;API_KEY&gt;'</span> <span class="se">\</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-fetch'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span><span class="p">:</span><span class="s1">'application/json'</span>

<span class="p">};</span>

<span class="nx">fetch</span><span class="p">(</span><span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span>
<span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>

  <span class="na">headers</span><span class="p">:</span> <span class="nx">headers</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
<blockquote>
<p>200 Response</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="s2">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-001"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0b53479856488f542a18fef96b84119d"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Powershot S100"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0e51493cd1ae85c097547de808642659"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For front facing camera"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-002"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"df0fb1aed5215106cf5bd23f8a005a55"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Git2"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"f473a293f4294c6890f955fad4d10dc1"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For downward facing camera"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p><code>GET /fleet/cameras</code></p>

<p>Get all cameras belonging to the company of the user. This endpoint returns an array of JSON objects, with each object representing a <code>camera</code> in the database.</p>

<div></div>
<h3 id='create-new-camera'>Create new camera</h3>
<blockquote>
<p>Code samples</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span><span class="p">,</span>
  <span class="s1">'Accept'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span>
<span class="p">}</span>

<span class="n">result</span> <span class="o">=</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">post</span> <span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span>
  <span class="ss">params: </span><span class="p">{</span>
  <span class="p">},</span> <span class="ss">headers: </span><span class="n">headers</span>

<span class="nb">p</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
  <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'application/json'</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>

<span class="p">},</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>

<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>

</code></pre><pre class="highlight shell tab-shell"><code>curl -X POST <span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span> <span class="se">\</span>
     -H <span class="s1">'Authorization: Bearer &lt;AUTH_TOKEN&gt;'</span> <span class="se">\</span>
     -H <span class="s1">'X-API-Key: &lt;API_KEY&gt;'</span> <span class="se">\</span>
     -d <span class="s1">'{
      "name": "CAMERA-001",
      "model_id": "0e51493cd1ae85c097547de808642659",
      "notes": "For front facing camera"
     }'</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-fetch'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">inputBody</span> <span class="o">=</span> <span class="s1">'{
  "name": "CAMERA-001",
  "model_id": "0e51493cd1ae85c097547de808642659",
  "notes": "For front facing camera"
}'</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Content-Type'</span><span class="p">:</span><span class="s1">'application/json'</span><span class="p">,</span>
  <span class="s1">'Accept'</span><span class="p">:</span><span class="s1">'application/json'</span>

<span class="p">};</span>

<span class="nx">fetch</span><span class="p">(</span><span class="s1">'https://api.garuda.io/v2/fleet/cameras'</span><span class="p">,</span>
<span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
  <span class="na">body</span><span class="p">:</span> <span class="nx">inputBody</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="nx">headers</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
<blockquote>
<p>200 Response</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="s2">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-001"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0b53479856488f542a18fef96b84119d"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Powershot S100"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0e51493cd1ae85c097547de808642659"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For front facing camera"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p><code>POST /fleet/cameras</code></p>

<p>Create a new camera belonging to the company of the user. At minimum, you should pass in the following details in the request body:</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the camera</td>
</tr>
<tr>
<td><code>model_id</code></td>
<td>String</td>
<td>Model ID of the camera</td>
</tr>
</tbody></table>

<p><code>model_id</code> has to be a valid model ID that already exists in the database.</p>

<p>There are some additional details that you can add to the request body to flesh out your camera details even further:</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>notes</code></td>
<td>String</td>
<td>Descriptive notes for the camera</td>
</tr>
<tr>
<td><code>acquired_on</code></td>
<td>String</td>
<td>Date that camera was acquired on, in epoch (Unix timestamp), converted to milliseconds</td>
</tr>
</tbody></table>

<p>If the <code>acquired_on</code> property is not specified, it will be saved as the time that the request was made.</p>

<p>A camera that has been successfully created will return a response with a <code>&quot;success&quot;: true</code> body and a <code>200 OK</code> status. </p>

<div></div>
<h3 id='get-a-camera'>Get a camera</h3>
<blockquote>
<p>Code samples</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span>
<span class="p">}</span>

<span class="n">result</span> <span class="o">=</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">get</span> <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
  <span class="ss">params: </span><span class="p">{</span>
  <span class="p">},</span> <span class="ss">headers: </span><span class="n">headers</span>

<span class="nb">p</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'application/json'</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>

<span class="p">},</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>

<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>

</code></pre><pre class="highlight shell tab-shell"><code>curl -X GET <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span> <span class="se">\</span>
     -H <span class="s1">'Authorization: Bearer &lt;AUTH_TOKEN&gt;'</span> <span class="se">\</span>
     -H <span class="s1">'X-API-Key: &lt;API_KEY&gt;'</span> <span class="se">\</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-fetch'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span><span class="p">:</span><span class="s1">'application/json'</span>

<span class="p">};</span>

<span class="nx">fetch</span><span class="p">(</span><span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
<span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>

  <span class="na">headers</span><span class="p">:</span> <span class="nx">headers</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
<blockquote>
<p>200 Response</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="s2">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-001"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0b53479856488f542a18fef96b84119d"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Powershot S100"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0e51493cd1ae85c097547de808642659"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For front facing camera"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p><code>GET /fleet/cameras/{camera_id}</code></p>

<p>Get a specific camera belonging to the company of the user. </p>

<p><code>camera_id</code> parameter has to be a valid camera ID.</p>

<div></div>
<h3 id='update-a-camera'>Update a camera</h3>
<blockquote>
<p>Code samples</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Content-Type'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span><span class="p">,</span>
  <span class="s1">'Accept'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span>
<span class="p">}</span>

<span class="n">result</span> <span class="o">=</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">patch</span> <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
  <span class="ss">params: </span><span class="p">{</span>
  <span class="p">},</span> <span class="ss">headers: </span><span class="n">headers</span>

<span class="nb">p</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span><span class="p">,</span>
  <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'application/json'</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span><span class="s">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>

<span class="p">},</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>

<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>

</code></pre><pre class="highlight shell tab-shell"><code>curl -X PATCH <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span> <span class="se">\</span>
     -H <span class="s1">'Authorization: Bearer &lt;AUTH_TOKEN&gt;'</span> <span class="se">\</span>
     -H <span class="s1">'X-API-Key: &lt;API_KEY&gt;'</span> <span class="se">\</span>
     -d <span class="s1">'{
      "notes": "For front facing camera, can also be used for downward facing"
     }'</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-fetch'</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">inputBody</span> <span class="o">=</span> <span class="s1">'{
  "notes": "For front facing camera, can also be used for downward facing"
}'</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Content-Type'</span><span class="p">:</span><span class="s1">'application/json'</span><span class="p">,</span>
  <span class="s1">'Accept'</span><span class="p">:</span><span class="s1">'application/json'</span>

<span class="p">};</span>

<span class="nx">fetch</span><span class="p">(</span><span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
<span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'PATCH'</span><span class="p">,</span>
  <span class="na">body</span><span class="p">:</span> <span class="nx">inputBody</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="nx">headers</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
<blockquote>
<p>200 Response</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="s2">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-001"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0b53479856488f542a18fef96b84119d"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Powershot S100"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0e51493cd1ae85c097547de808642659"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For front facing camera, can also be used for downward facing"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p><code>PATCH /fleet/cameras/{camera_id}</code></p>

<p>Update a specific camera belonging to the company of the user.</p>

<p>To update a specific camera, you can pass whichever properties that you wish to update in the request body. All properties are optional.</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the camera</td>
</tr>
<tr>
<td><code>camera_id</code></td>
<td>String</td>
<td>Camera ID</td>
</tr>
<tr>
<td><code>model</code></td>
<td>Object</td>
<td>Object representing the camera model. Contains the <code>name</code> of the model and the <code>model_id</code></td>
</tr>
<tr>
<td><code>notes</code></td>
<td>String</td>
<td>Descriptive notes for the camera</td>
</tr>
<tr>
<td><code>acquired_on</code></td>
<td>String</td>
<td>Date that camera was acquired on, in epoch (Unix timestamp), converted to milliseconds</td>
</tr>
</tbody></table>

<p>A camera that has been successfully updated will return a response with a <code>&quot;success&quot;: true</code> body and a <code>200 OK</code> status. Response body will also contain the updated <code>camera</code> object.</p>

<div></div>
<h3 id='delete-a-camera'>Delete a camera</h3>
<blockquote>
<p>Code samples</p>
</blockquote>
<pre class="highlight ruby tab-ruby"><code><span class="nb">require</span> <span class="s1">'rest-client'</span>
<span class="nb">require</span> <span class="s1">'json'</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span> <span class="o">=&gt;</span> <span class="s1">'application/json'</span>
<span class="p">}</span>

<span class="n">result</span> <span class="o">=</span> <span class="no">RestClient</span><span class="p">.</span><span class="nf">delete</span> <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
  <span class="ss">params: </span><span class="p">{</span>
  <span class="p">},</span> <span class="ss">headers: </span><span class="n">headers</span>

<span class="nb">p</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

</code></pre><pre class="highlight python tab-python"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'application/json'</span>
<span class="p">}</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>

<span class="p">},</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="p">)</span>

<span class="k">print</span> <span class="n">r</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>

</code></pre><pre class="highlight shell tab-shell"><code>curl -X DELETE <span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span> <span class="se">\</span>
     -H <span class="s1">'Authorization: Bearer &lt;AUTH_TOKEN&gt;'</span> <span class="se">\</span>
     -H <span class="s1">'X-API-Key: &lt;API_KEY&gt;'</span> <span class="se">\</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'node-fetch'</span><span class="p">);</span>

<span class="kr">const</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Accept'</span><span class="p">:</span><span class="s1">'application/json'</span>

<span class="p">};</span>

<span class="nx">fetch</span><span class="p">(</span><span class="s1">'https://api.garuda.io/v2/fleet/cameras/{camera_id}'</span><span class="p">,</span>
<span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'DELETE'</span><span class="p">,</span>

  <span class="na">headers</span><span class="p">:</span> <span class="nx">headers</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
<span class="p">});</span>

</code></pre>
<blockquote>
<p>200 Response</p>
</blockquote>
<pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="s2">"success"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="s2">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CAMERA-001"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"camera_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0b53479856488f542a18fef96b84119d"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"model"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Powershot S100"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"model_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0e51493cd1ae85c097547de808642659"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"For front facing camera"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"acquired_on"</span><span class="p">:</span><span class="w"> </span><span class="mi">1554090304172</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre>
<p><code>DELETE /fleet/cameras/{camera_id}</code></p>

<p>Delete a specific camera belonging to the company of the user. A valid <code>camera_id</code> in the path parameter is required for a successful call.</p>

<p>A successful deletion will return a <code>200 OK</code> status and the deleted camera object in the response body.</p>

<div></div>
